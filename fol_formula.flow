import ds/tree;
import ds/set;
import string;

export {
	FolFormula ::= FolAnd, FolOr, FolImpl, FolNot, FolQuant, FolAtomic;
		FolAnd(form1 : FolFormula, form2 : FolFormula);
		FolOr(form1 : FolFormula, form2 : FolFormula);
		FolImpl(premise : FolFormula, conclusion : FolFormula);
		FolNot(form : FolFormula);
		FolQuant(quant : FolQuantifier, form : FolFormula);

	FolAtomic ::= FolPred, FolEq, FolTrue, FolFalse;
		FolPred(name : string, args : [FolTerm]);
		FolEq(x : FolTerm, y : FolTerm);
		FolTrue();
		FolFalse();

	FolQuantifier ::= FolForall, FolExists;
		FolForall(var : FolVar);
		FolExists(var : FolVar);

	FolTerm ::= FolVar, FolFunc;
		FolVar(name : string);
		FolFunc(name : string, args : [FolTerm]);

	FolSymb ::= FolFuncSymb, FolPredSymb;
		FolFuncSymb(
			name : string,
			arity : int,
		);
		FolPredSymb(
			name : string,
			arity : int,
		);

	FolFlatterm(nodes : FolFlattermNode);
	FolFlattermNode ::= FolFlattermVar, FolFlattermFunc;
		FolFlattermVar(name : string);
		FolFlattermFunc(name : string, arity : int, len : int);

formulaSign(f : FolFormula) -> Tree<string, FolSymb> {
	doFormulaSign(f, makeTree())
}
		
doFormulaSign(f : FolFormula, acc : Tree<string, FolSymb>) -> Tree<string, FolSymb> {
	switch (f) {
		FolAnd(f1, f2):   doFormulaSign(f1, doFormulaSign(f2, acc));
		FolOr(f1, f2):    doFormulaSign(f1, doFormulaSign(f2, acc));
		FolImpl(f1, f2):  doFormulaSign(f1, doFormulaSign(f2, acc));
		FolNot(f1):       doFormulaSign(f1, acc);
		FolQuant(q, f1):  doFormulaSign(f1, acc);
		FolPred(n, args):
			fold(args,
				setTree(acc, n, FolPredSymb(n, length(args))),
				\ac, arg -> doTermSign(arg, ac)
			);
		FolEq(x, y): doTermSign(x, doTermSign(y, acc))
		FolTrue(): acc;
		FolFalse(): acc;
	}
}

termSign(f : FolTerm) -> Tree<string, FolSymb> {
	doTermSign(f, makeTree())
}

doTermSign(t : FolTerm, acc : Tree<string, FolSymb>) -> Tree<string, FolSymb> {
	switch (t) {
		FolFunc(n, args): 
			fold(args, setTree(acc, n, FolFuncSymb(n, length(args))),
				\ac, arg -> doTermSign(arg, ac)
			);
		FolVar(n): acc;
	}
}

formula2string(f : FolFormula) -> string {
	switch (f) {
		FolAnd(f1, f2):  "(" + formula2string(f1) + " & " + formula2string(f2) + ")";
		FolOr(f1, f2):   "(" + formula2string(f1) + " V " + formula2string(f2) + ")";
		FolImpl(f1, f2): "(" + formula2string(f1) + " -> " + formula2string(f2) + ")";
		FolNot(f1): "-. " + formula2string(f1);
		FolQuant(q, f1):
			switch(q) {
				FolForall(v): "A" + v.name + "." + formula2string(f1);
				FolExists(v): "E" + v.name + "." + formula2string(f1);
			}
		FolPred(n, args):
			if (args == []) n else {
				n + "(" + strGlue(map(args, \arg -> term2string(arg)), ", ") + ")";
			}
		FolEq(x, y): "(" + term2string(x) + " = " + term2string(y) + ")";
		FolTrue(): "T";
		FolFalse(): "F";
	}
}

term2string(t : FolTerm) -> string {
	switch (t) {
		FolVar(n): n; 
		FolFunc(n, args): n + "(" + strGlue(map(args, \arg -> term2string(arg)), ", ") + ")";
	}
}

termVars(t : FolTerm) -> Set<string>;
formulaVars(f : FolFormula) -> Set<string>;
formulaFreeVars(f : FolFormula) -> Set<string>;
conjOf(fs : [FolFormula]) -> FolFormula;
formulaContainsEquality(f : FolFormula) -> bool;
universalClosure(f : FolFormula) -> FolFormula;

}

conjOf(fs : [FolFormula]) -> FolFormula {
	if (length(fs) == 0) FolTrue() else 
	fold(tail(fs), fs[0], \acc, f -> FolAnd(acc, f));
}


termVars(t : FolTerm) -> Set<string> {
	doTermVars(t, makeSet());
}

doTermVars(t : FolTerm, acc : Set<string>) -> Set<string> {
	switch (t) {
		FolVar(n): insertSet(acc, n); 
		FolFunc(n, args): fold(args, acc, \ac, arg -> doTermVars(arg, ac));
	}
}

formulaVars(f : FolFormula) -> Set<string> {
	doFormulaVars(f, makeSet());
}

doFormulaVars(f : FolFormula, acc : Set<string>) -> Set<string> {
	switch (f) {
		FolAnd(f1, f2):   doFormulaVars(f1, doFormulaVars(f2, acc));
		FolOr(f1, f2):    doFormulaVars(f1, doFormulaVars(f2, acc));
		FolImpl(f1, f2):  doFormulaVars(f1, doFormulaVars(f2, acc));
		FolNot(f1):       doFormulaVars(f1, acc);
		FolQuant(q, f1):  doFormulaVars(f1, insertSet(acc, q.var.name));
		FolPred(n, args): fold(args, acc, \ac, arg -> doTermVars(arg, ac));
		FolEq(x, y):      doTermVars(x, doTermVars(y, acc));
		FolTrue():        acc;
		FolFalse():       acc;
	}
}

formulaFreeVars(f : FolFormula) -> Set<string> {
	doFormulaFreeVars(f, makeSet());
}

doFormulaFreeVars(f : FolFormula, acc : Set<string>) -> Set<string> {
	switch (f) {
		FolAnd(f1, f2):   doFormulaFreeVars(f1, doFormulaFreeVars(f2, acc));
		FolOr(f1, f2):    doFormulaFreeVars(f1, doFormulaFreeVars(f2, acc));
		FolImpl(f1, f2):  doFormulaFreeVars(f1, doFormulaFreeVars(f2, acc));
		FolNot(f1):       doFormulaFreeVars(f1, acc);
		FolQuant(q, f1):  removeSet(doFormulaFreeVars(f1, acc), q.var.name);
		FolPred(n, args): fold(args, acc, \ac, arg -> doTermVars(arg, ac));
		FolEq(x, y):      doTermVars(x, doTermVars(y, acc));
		FolTrue():        acc;
		FolFalse():       acc;
	}
}

formulaContainsEquality(f : FolFormula) -> bool {
	switch (f) {
		FolAnd(f1, f2):   formulaContainsEquality(f1) || formulaContainsEquality(f2);
		FolOr(f1, f2):    formulaContainsEquality(f1) || formulaContainsEquality(f2);
		FolImpl(f1, f2):  formulaContainsEquality(f1) || formulaContainsEquality(f2);
		FolNot(f1):       formulaContainsEquality(f1);
		FolQuant(__, f1): formulaContainsEquality(f1);
		FolPred(n, args): (n == "=") && (length(args) == 2);
		FolEq(x, y):      true;
		FolTrue():        false;
		FolFalse():       false;
	}
}

universalClosure(f : FolFormula) -> FolFormula {
	foldSet(formulaFreeVars(f), f, \acc, v ->
		FolQuant(FolForall(FolVar(v)), acc)
	);
}
