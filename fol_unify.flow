import fol_subst;

export {

unifyTermArrays(ts1 : [FolTerm], ts2 : [FolTerm]) -> Maybe<Tree<string, FolTerm>>;

}

unifyTermArrays(ts1 : [FolTerm], ts2 : [FolTerm]) -> Maybe<Tree<string, FolTerm>> {
	if (length(ts1) != length(ts2)) None() else {
		foldi(ts1, Some(makeTree()), \i, acc, t1 -> unifyTermsPair(t1, ts2[i], acc))
	}
}

unifyTermsPair(t1 : FolTerm, t2 : FolTerm, msubst : Maybe<Tree<string, FolTerm>>) -> Maybe<Tree<string, FolTerm>> {
	switch (msubst) {
		None(): None();
		Some(subst): {
			check_new = \v : string, t : FolTerm -> 
				switch (lookupTree(subst, v)) {
					Some(t0): 
						if (t0 == t) msubst else None();
					None():
						Some(composeSubst(subst, makeTree1(v, t)))
				};
			t1s = applySubstToTerm(subst, t1);
			t2s = applySubstToTerm(subst, t2);
			switch (t1s) {
				FolVar(v1):
					switch (t2s) {
						FolVar(v2):
							if (v1 == v2) msubst else check_new(v1, FolVar(v2))
						FolFunc(__, __):
							check_new(v1, t2s);
					}
				FolFunc(f1, args1):
					switch (t2s) {
						FolVar(v2): 
							check_new(v2, t1s);
						FolFunc(f2, args2): {
							if (f1 == f2 && length(args1) == length(args2)) {
								foldi(args1, msubst, \i, acc, arg1 ->
									unifyTermsPair(arg1, args2[i], acc)
								)
							} else {
								None();
							}
						}
					}
			}
		}
	}
}
