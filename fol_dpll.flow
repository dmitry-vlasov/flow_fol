import fol_norm;

export {
	DPLL_Env(
		form : FolCNF,
		subst : Tree<string, bool>,
		status : Maybe<bool>,
	);

	dpllSAT(f : FolFormula) -> Maybe<Tree<string, bool>>;
	dpllVar(x : FolAtom) -> string;
}

dpllSAT(f : FolFormula) -> Maybe<Tree<string, bool>> {
	if (formulaContainsEquality(f)) {
		println("DPLL cannot be applied to the formula: " + formula2string(f) + " since it contains =");
		None();
	} else {
		ret = dpllCNF(DPLL_Env(toPNF(f).cnf, makeTree(), None()));
		if (ret.status == Some(true)) {
			Some(ret.subst)
		} else if (ret.status == Some(false)) {
			None()
		} else {
			println("Error: DPLL method is non-complete");
			None()
		}
	}
}

dpllVar(x : FolAtom) -> string {
	cast(x : FolAtom -> FolPred).name;
}

dpllPropagateUnitStep(env: DPLL_Env, u : FolLiteral) -> DPLL_Env {
	new_conj = fold(env.form.conj, [],
		\acc, d -> {
			switch (find(d.disj, \lit -> dpllVar(lit.atom) == dpllVar(u.atom))
			) {
			Some(lit):
				if (lit.sign != u.sign) {
					concat(acc, [FolDisj([])]);
				} else {
					new_disj = filter(d.disj, \l -> dpllVar(l.atom) != dpllVar(u.atom));
					if (new_disj == []) {
						acc 
					} else {
					concat(acc, [FolDisj(new_disj)])
					}
				}
			None(): concat(acc, [d])
			}
		}
	);
	if (exists(new_conj, \d -> d.disj == [])) {
		DPLL_Env(FolCNF([FolDisj([])]), makeTree(), Some(false))
	} else {
		DPLL_Env(FolCNF(new_conj), setTree(env.subst, dpllVar(u.atom), u.sign), None())
	}
}

dpllPropagateUnit(env : DPLL_Env)  -> DPLL_Env {
	switch (find(env.form.conj, \d -> length(d.disj) == 1)) {
		Some(d): dpllPropagateUnit(dpllPropagateUnitStep(env, d.disj[0]));
		None(): env;
	}
}

chooseVar(f : FolCNF) -> FolPred {
	cast(f.conj[0].disj[0].atom : FolAtom -> FolPred);
}

dpllPureLiterals(env : DPLL_Env) -> DPLL_Env {
	vars = fold(env.form.conj, makeTree(), \acc, d ->
		fold(d.disj, acc, 
			\ac, lit -> {
				pair = lookupTreeDef(ac, dpllVar(lit.atom), Pair(false, false));
				if (lit.sign) {
					setTree(ac, dpllVar(lit.atom), Pair(true, pair.second));
				} else {
					setTree(ac, dpllVar(lit.atom), Pair(pair.first, true));
				}
			}
		)
	);
	pure_vars = foldTree(vars, makeSet(), \name, pair, acc -> 
		if (pair.first && pair.second) acc else insertSet(acc, name)
	);
	DPLL_Env(
		FolCNF(
			filter(env.form.conj, \d -> forall(d.disj, \lit -> !containsSet(pure_vars, dpllVar(lit.atom))))
		),
		foldTree(vars, env.subst, \var, pair, acc -> 
			if (pair.first && !pair.second) setTree(acc, var, true) else 
			if (!pair.first && pair.second) setTree(acc, var, false) else acc
		),
		env.status
	);
}

dpllCNF(env : DPLL_Env) -> DPLL_Env {
	e1 = dpllPropagateUnit(env);
	e2 = dpllPureLiterals(e1);
	if (e2.form.conj == []) DPLL_Env(e2.form, e2.subst, Some(true)) else
	if (exists(e2.form.conj, \d -> d.disj == [])) DPLL_Env(e2.form, makeTree(), Some(false))
	else {
		var = chooseVar(e2.form);
		pos = dpllCNF(
			DPLL_Env(e2 with form = FolCNF(concat(e2.form.conj, [FolDisj([FolLiteral(true, var)])])))
		);
		if (pos.status != None()) pos else
		dpllCNF(
			DPLL_Env(e2 with form = FolCNF(concat(e2.form.conj, [FolDisj([FolLiteral(false, var)])])))
		)
	}
}
