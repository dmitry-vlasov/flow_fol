import fs/filesystem;
import fol_parser;
import fol_resolution;

main() {
	form_src =
		if (isUrlParameterSet("formula")) 
			[trim2(getUrlParameter("formula"), "\"")] 
		else if (isUrlParameterSet("file")) {
			file = getUrlParameterDef("file", "");
			if (fileExists(file)) {
				filter(strSplit(getFileContent(file), "\n"), \s -> s != "")
			} else {
				println("file: " + file + " is not found");
				[]
			}
		} else test_set;
	iter(form_src, 
		\src -> {
			switch (parseFolFormula(src)) {
				Some(formula): {
					println("SAT problem for formula: " + formula2string(formula));
					switch (resolutionFOL(formula)) {
						Some(subst): 
							println("\tYES: "
								/*strGlue(map(tree2pairs(subst), \pair -> pair.first + "=" + b2s(pair.second)), ", ")*/
							)
						None():
							println("\tNO")
					}
				}
				None(): println("parsing error");
			}
		}
	)
}

test_set = [
"A", 
"-. A", 
"-. -. A", 
"-. -. -.A", 
"(A & B)", 
"(A V B)",
"(A & -. A)",
"((A & B) -> -. B)",
"(((A & B) -> -. B) -> -. A)",
"(
	((x V y) V z) & 
	(
		((x V y) V -. z) & 
		(
			((x V -. y) V z) & 
			(
				((x V -. y) V -. z) & 
				(
					((-. x V y) V z) & 
					(
						((-. x V y) V -. z) & 
						(
							((-. x V -. y) V z) & 
							((-. x V -. y) V -. z)
						)
					)
				)
			)
		)
	)
)",
"-.((-. A -> B) -> (A V B))",
];
