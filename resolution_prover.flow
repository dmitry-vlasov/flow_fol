import fs/filesystem;
import fol_parser;
import fol_resolution;
import fol_resolution_1;

maybeBool2s(m : Maybe<bool>) -> string {
	switch (m) {
		Some(v): b2s(v);
		None(): "?";
	}
}

main() {
	/*mbool2s = \m -> 
		switch (m) {
			Some(v): b2s(v);
			None(): "?";
		}
	Peano_ax = map(Peano_ax_src, \ax -> parseFolFormulaDef(ax, FolFalse()));
	println("Peano axioms: ");
	iter(Peano_ax, \ax -> println("\t" + formula2string(ax)));
	Peano_tests = map(Peano_tests_src, \t -> parseFolFormulaDef(t, FolFalse()));
	iter(Peano_tests, 
		\test -> {
			println("Does Peano axioms imply: " + formula2string(test) + "?");
			println("\t" + maybeBool2s(resolutionEntailment1(Peano_ax, test, s2d(getUrlParameterDef("limit", "10.0")))));
		}
	)*/
	test_term = \t -> {
		maybeApply(parseFolTerm(t), \term -> {
			flat = flattenTerm(term);
			switch (unflattenTerm(flat)) {
				Some(unflat): 
					if (term == unflat) {
						println("ok: " + term2string(unflat));
					} else {
						println("NOT ok: " + term2string(unflat) + " != " + term2string(term));
					}
				None(): {
					println("unflat of: " + term2string(term) + " failed");
				}
			}
		})
	}
	
	iter(
		["f(x, g(y, z), f(h(a), t(y), g(a, x)))", "f(x)", "x", "g(x, y)", "sin(f(x, g(y)), cos(y))"],
		test_term
	);
	
	runSample(sample1);
	//runSample(sample2);
}

runSample(sample : TestSample) {
	axioms = map(sample.axioms, \ax -> parseFolFormulaDef(ax, FolFalse()));
	println("Axioms: ");
	iter(axioms, \ax -> println("\t" + formula2string(ax)));
	tests = map(sample.tests, \t -> parseFolFormulaDef(t, FolFalse()));
	iter(tests, 
		\test -> {
			println("Does axioms imply: " + formula2string(test) + "?");
			println("\t" + maybeBool2s(resolutionEntailment1(axioms, test, s2d(getUrlParameterDef("limit", "10.0")))));
		}
	)
}

TestSample(
	axioms : [string],
	tests: [string]
);

sample1 = TestSample(
	[
		"A x. ((x + 0) = x)", 
		"A x. A y. A z. ((x + s(y)) = s((x + y)))",
	],
	[
		"((s(0) + s(0)) = s(s(0)))",
	]
);

sample2 = TestSample(
	[
		"A x. +(x, 0, x)", 
		"A x. A y. A z. (+(x, y, z) -> +(x, s(y), s(z)))",
	],
	[
		"+(s(0), s(0), s(s(0)))",
	]
);

Peano_ax_src = [
	"A x. ((x + 0) = x)", 
	"A x. A y. A z. ((x + s(y)) = s((x + y)))",
	//"A x. ((x * 0) = 0)",
	//"A x. A y. A z. ((x * s(y)) = ((x * y) + x))",
	//"A x. (E y. ((y + y) = x) <-> even(x))"
];

Peano_tests_src = [
	"((s(0) + s(0)) = s(s(0)))",
	/*"+(s(0()), s(0()), s(s(0())))",
	"+(s(0()), s(0()), s(0()))",
	"+(s(0()), s(0()), s(s(s(0()))))",
	"+(s(s(0())), s(s(0())), s(s(s(s(0())))))",
	
	"*(s(s(0())), s(0()), s(s(0())))",
	"*(s(0()), s(s(0())), s(s(0())))",
	"*(s(s(0())), s(s(0())), s(s(s(s(0())))))",
	"*(s(s(0())), s(s(0())), s(s(s(0()))))",
	"*(s(s(0())), s(s(0())), s(s(s(s(s(0()))))))",

	"even(0())",
	"even(s(0()))",
	"even(s(s(0())))",
	"even(s(s(s(0()))))",
	"A x. A y. A z.(((even(x) & even(y)) & +(x, y, z)) -> even(z))",*/
];

/*
Peano_ax_src = [
	"A x. +(x, 0(), x)", 
	"A x. A y. A z. (+(x, y, z) -> +(x, s(y), s(z)))",
	"A x. A y. A z. (+(x, s(y), s(z)) -> +(x, y, z))",
	"A x. *(x, 0(), 0())",
	"A x. A y. A z. (E t. (+(t, x, z) & *(x, y, t)) -> *(x, s(y), z))",
	"A x. (E y. +(y, y, x) -> even(x))",
	"A x. (even(x) -> E y. +(y, y, x))",
];

Peano_tests_src = [
	"+(s(0()), s(0()), 0())",
	"+(s(0()), s(0()), s(s(0())))",
	"+(s(0()), s(0()), s(0()))",
	"+(s(0()), s(0()), s(s(s(0()))))",
	"+(s(s(0())), s(s(0())), s(s(s(s(0())))))",
	
	"*(s(s(0())), s(0()), s(s(0())))",
	"*(s(0()), s(s(0())), s(s(0())))",
	"*(s(s(0())), s(s(0())), s(s(s(s(0())))))",
	"*(s(s(0())), s(s(0())), s(s(s(0()))))",
	"*(s(s(0())), s(s(0())), s(s(s(s(s(0()))))))",

	"even(0())",
	"even(s(0()))",
	"even(s(s(0())))",
	"even(s(s(s(0()))))",
	"A x. A y. A z.(((even(x) & even(y)) & +(x, y, z)) -> even(z))",* /
];
*/
