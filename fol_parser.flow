import lingo/pegcode/driver;
import fol_formula;

export {
	parseFolFormula(src : string) -> Maybe<FolFormula>;
	parseFolFormulaDef(src : string, def : FolFormula) -> FolFormula;
	parseFolTerm(src : string) -> Maybe<FolTerm>;
}

fol_formula_parser = compilePegGrammar("#include formula.lingo");
	
parseFolFormula(src : string) -> Maybe<FolFormula> {
	formula = parsic(fol_formula_parser, src, 
		SemanticActions(
			mergeTree(defaultPegActions.t,
				pairs2tree([
					Pair("createPred", \s -> FolPred(s[0], [])),
					Pair("createBinPred", \s -> FolPred(s[0], [s[1], s[2]])),
					Pair("createBinTerm", \s -> FolFunc(s[0], [s[1], s[2]])),
					Pair("createFolEqual", \s ->
						FolAnd(FolImpl(s[0], s[1]),FolImpl(s[1], s[0]))
					),
					/*Pair("createDefForm", \s -> {
						def = FolFormulaDef(s[1], s[2]);
						form_defs := setTree(^form_defs, s[0], def);
						def
					}),
					Pair("createDefFunc", \s -> {
						def = FolFunctionDef(s[1], s[2]);
						func_defs := setTree(^func_defs, s[0], def);
						def
					}),*/
					Pair("createZeroTerms", \__ -> cast([] : [flow] -> flow)),
					Pair("createOneTerm", \s -> cast([s[0]] : [flow] -> flow)),
					Pair("createSomeTerms", \s -> cast(concat([s[0]], s[1]) : [flow] -> flow)),
					Pair("createConstTerm", \s -> FolFunc(s[0], [])),
				])
			)
		)
	);
	switch (formula) {
		FolFormula(): Some(formula);
		default: None()
	}
}

fol_term_parser = compilePegGrammar("#include term.lingo");
	
parseFolTerm(src : string) -> Maybe<FolTerm> {
	term = parsic(fol_term_parser, src, 
		SemanticActions(
			mergeTree(defaultPegActions.t,
				pairs2tree([
					/*Pair("createPred", \s -> FolPred(s[0], [])),
					Pair("createBinPred", \s -> FolPred(s[0], [s[1], s[2]])),
					Pair("createBinTerm", \s -> FolFunc(s[0], [s[1], s[2]])),
					Pair("createFolEqual", \s ->
						FolAnd(FolImpl(s[0], s[1]),FolImpl(s[1], s[0]))
					),*/
					Pair("createZeroTerms", \__ -> cast([] : [flow] -> flow)),
					Pair("createOneTerm", \s -> cast([s[0]] : [flow] -> flow)),
					Pair("createSomeTerms", \s -> cast(concat([s[0]], s[1]) : [flow] -> flow)),
					Pair("createConstTerm", \s -> FolFunc(s[0], [])),
				])
			)
		)
	);
	switch (term) {
		FolTerm(): Some(term);
		default: None()
	}
}

parseFolFormulaDef(src : string, def : FolFormula) -> FolFormula {
	switch (parseFolFormula(src)) {
		Some(f): f;
		None(): def;
	}
}
